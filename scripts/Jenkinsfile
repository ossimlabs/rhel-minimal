//==================================================================================================
// This is the Jenkins pipeline script for building the OMAR WMS application.
// Environment varialbes that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    REPOSITORY_MANAGER_USER: The user to use when pushing artifacts
//    REPOSITORY_MANAGER_PASSWORD: The password to use when pushing artifacts
//    DOCKER_REGISTRY_USERNAME: The user to use logging into the docker registry
//    DOCKER_REGISTRY_PASSWORD: The password to use logging into the docker registry
//==================================================================================================
node("omar-build"){
    def workspaceDir = pwd()
    def appName = "rhel-minimal"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"

    stage("Checkout"){
        dir(appName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${appName}.git"
        }

        dir(omarCommonProjName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${omarCommonProjName}.git"
        }

        // Set the environment variable for the gradle build
        // env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"
    }
    stage("Download Artifacts") {
        step ([$class: "CopyArtifact",
               projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
               filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
               flatten: true])
        sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
    }

    try {
      stage ("Publish Docker App")
      {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'dockerCredentials',
                        usernameVariable: 'DOCKER_REGISTRY_USERNAME',
                        passwordVariable: 'DOCKER_REGISTRY_PASSWORD']])
        {
            // Run all tasks on the app. This includes pushing to OpenShift and S3.
            sh """
            pushd ${workspaceDir}/${appName}/
            aws s3 sync s3://o2-delivery/${OSSIM_GIT_BRANCH}/yum.repos.d ./docker/yum.repos.d
            gradle ${GRADLE_TASK}
            popd
            """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
    }
  stage("Clean Workspace")
  {
      if ("${CLEAN_WORKSPACE}" == "true")
        step([$class: 'WsCleanup'])
  }
}
